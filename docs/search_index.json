[
["index.html", "eBird Best Practices I Welcome", " eBird Best Practices I Matthew Strimas-Mackey, Alison Johnston, Wesley M. Hochachka, Viviana Ruiz-Gutierrez, Orin J. Robinson, Eliot T. Miller, Tom Auer, Steve Kelling, Daniel Fink 2019-06-10 Welcome These lessons are part of a workshop given at AOS 2019 in Anchorage on eBird Best Practices. Part I of the workshop covers extracting and processing eBird data with R. The content of this workshop is also covered in the free online book eBird Best Practices. "],
["introduction.html", "Lesson 1 Introduction", " Lesson 1 Introduction We start with a short presentation giving and introduction to eBird and the motivation behind the auk package. The presentation can be downloaded in PowerPoint format or viewed on SpeakerDeck. "],
["setup.html", "Lesson 2 Setup 2.1 Tidyverse", " Lesson 2 Setup Before we dive into writing code, let’s take a few minutes to ensure our systems are correctly set up with all the correct software and R packages. Devoting some time to this up front will reduce errors and make troubleshooting easier later in the workshop. Start by opening a browser window with three tabs pointing to the following websites: The eBird homepage The auk website. This R package is used to access eBird data and we’ll be using the website to access help and resources. The etherpad for this workshop. This is a collaborative notepad similar to Google Docs, which we can use to share code and links. Make sure you can edit the document. Checkpoint Are all tabs correctly opened? Can you edit the etherpad? Next install or update RStudio, then open it up. Look at the top line of the console, which gives your R version; copy that over to the etherpad. If you have a version older than 3.5.0, update R. Checkpoint Is your R version at least 3.5.0? Do you need help updating? Create a new RStudio project called ebird-best-practices. Next, to install all the packages required for this workshop and part II, run the following code: install.packages(&quot;remotes&quot;) remotes::install_github(&quot;mstrimas/ebppackages&quot;) As mentioned in the introduction, the auk package uses the unix command line tool AWK to extract data from eBird. AWK comes installed by default on Mac OS and Linux systems, but Windows users will need to install it. To do so, install the Cygwin software. Checkpoint Is AWK installed? Run the following code to test that auk is installed correctly and AWK is working: library(auk) library(tidyverse) tf &lt;- tempfile() system.file(&quot;extdata/ebd-sample.txt&quot;, package = &quot;auk&quot;) %&gt;% auk_ebd() %&gt;% auk_species(species = c(&quot;Canada Jay&quot;, &quot;Blue Jay&quot;)) %&gt;% auk_country(country = c(&quot;US&quot;, &quot;Canada&quot;)) %&gt;% auk_bbox(bbox = c(-100, 37, -80, 52)) %&gt;% auk_date(date = c(&quot;2012-01-01&quot;, &quot;2012-12-31&quot;)) %&gt;% auk_time(start_time = c(&quot;06:00&quot;, &quot;09:00&quot;)) %&gt;% auk_duration(duration = c(0, 60)) %&gt;% auk_complete() %&gt;% auk_filter(tf) %&gt;% read_ebd() %&gt;% pull(common_name) %&gt;% message() unlink(tf) It should print Blue Jay. Checkpoint Did “Blue Jay” print without errors? If you’re running into any setup issues that can’t be resolved, use RStudio Cloud for this workshop instead. 2.1 Tidyverse Throughout this workshop, we’ll be using functions from the Tidyverse. This is an opinionated set of packages for working with data in R. Packages such as dplyr and ggplot2 are part of the Tidyverse. I’ll try to explain any functions I use as they come up; however, there’s one important operator from the Tidyverse that needs to be explaied up front: the pipe operator %&gt;%. The pipe operator takes the expression to the left of it and “pipes” it into the first argument of the expression on the right. # without pipe mean(1:10) #&gt; [1] 5.5 # with pipe 1:10 %&gt;% mean() #&gt; [1] 5.5 The value of the pipe operator becomes more clean when we have several operations in a row. # without pipes ran_norm &lt;- rnorm(10, sd = 5) ran_norm_pos &lt;- abs(ran_norm) ran_norm_sort &lt;- sort(ran_norm_pos) ran_norm_round &lt;- round(ran_norm_sort, digits = 1) ran_norm_round #&gt; [1] 0.9 1.5 1.6 2.4 2.9 3.1 3.7 4.1 4.2 8.0 # with pipes rnorm(10, sd = 5) %&gt;% abs() %&gt;% sort() %&gt;% round(digits = 1) #&gt; [1] 0.1 0.2 1.9 3.0 3.1 4.1 4.7 5.6 7.6 11.1 Checkpoint Any questions about the pipe? Exercise Rewrite the following code using pipes: round(exp(diff(log(runif(10, min = 0.5)))), 1) #&gt; [1] 0.9 1.1 0.9 1.0 1.2 0.6 1.4 1.2 1.0 Solution runif(10, min = 0.5) %&gt;% log() %&gt;% exp() %&gt;% round(digits = 1) #&gt; [1] 0.7 0.9 0.7 0.6 0.5 0.5 0.7 0.8 0.8 0.7 "],
["access.html", "Lesson 3 Data Access", " Lesson 3 Data Access The complete eBird database is provided via the eBird Basic Dataset (EBD), a large tab-separated text file. To start working with eBird data, we need to download this file. To access the EBD, you will need to create an eBird account and sign in to eBird. Once signed in, from the eBird homepage, click on the Science tab then scroll down to click on Using eBird for science in the right-hand menu. This page compiles links to a variety datasets, tools, and educational material for using eBird data to do science; it’s a great resource! On the following page, proceed to the eBird Basic Dataset page. If you haven’t already done so, you will need to submit a request to access the EBD. You can do this after the workshop if you haven’t already done so. From this page you can download the eBird Basic Dataset, a large tab-separated text file that contains (nearly) every eBird observation. In this file, each row corresponds to an observation of a species on a checklist. On this page, you can also download the Sampling Event Data. In this file, each row corresponds to a checklist rather than a species observation. We’ll see why this file is important later in the workshop. The EBD is huge, so don’t download these files now. Instead, we’ll be working with a small subset of the data today, which can be downloaded from the following links: eBird Basic Dataset: https://github.com/mstrimas/ebp-workshop/raw/master/data/ebd_relApr-2019_workshop.tar Sampling Event Data: https://github.com/mstrimas/ebp-workshop/raw/master/data/ebd_sampling_relApr-2019_workshop.tar The files will be in .tar format, and should be unarchived. The resulting directories will contain files with extension .txt.gz, these files should be uncompressed (on Windows use 7-Zip, on Mac use the default system uncompression utility) to produce two text files (ebd_relApr-2019_workshop.txt and ebd_sampling_relApr-2019_workshop.txt). Move these files to a sensible, central location on your computer. When working with the full dataset, the EBD will be over 200 GB! If this is too large to fit on your computer, it can be stored on an external hard drive. We’ll also talk later in the workshop about some ways of avoiding downloading the EBD. Green post it once you’re done, red post it if you’re having trouble Let’s take a look at this dataset. If we were working with the full EBD, we don’t have enough memory to read in the whole file, but we can always read a small subset. Open a new R script (03_access.R) and read in the first few lines: library(readr) ebd_top &lt;- read_tsv(&quot;~/data/ebird/ebd_relApr-2019_workshop.txt&quot;, n_max = 5) View this data frame within RStudio. Scroll over to the SAMPLING EVENT DATA column and note the value: S21914547. With this code we can access any non-private checklist via the website by appending it to https://ebird.org/view/checklist/. Look at the checklist online and compare it to the EBD. Notice three things that distiguish eBird data from other citizen science data: eBird collects data on the observation process, including the survey protocol used and effort information. This facilitates more robust analyses because we can account for variation in the observation process. Complete checklists enable non-detection to be inferred from the data. Without this, there’s no way to distinguish whether a species was not observered or just not reported. For these reasons, we refer to complete eBird checklists as semi-structured to distinguish from both most unstructured citizen science data and traditional structure scientific surveys. Exercise: Take a few minutes to explore the EBD and compare it to the checklists online. Notice above that we had to reference the full path to the text files. In general, it’s best to avoid using absolute paths in R scripts because it makes them less portable–if you’re sharing the files with someone else, they’ll need to change the file paths to point to the location at which they’ve stored the eBird data. The R package auk provides a workaround for this, by allowing users to set an environment variable (EDB_PATH) that points to the directory where you’ve stored the eBird data. To set this variable, use the function auk_set_ebd_path(). For example, if the EBD and Sampling Event Data files are in ~/data/ebird/, use: library(auk) auk_set_ebd_path(&quot;~/data/ebird/&quot;) "]
]
